name: Remote Server Deployment

on:
  workflow_dispatch:
    inputs:
      version: 
        description: 'Image version (e.g., 1.0.0)'
        required: true
        default: 'dev'
      services:
        description: 'Select services to deploy'
        required: true
        type: choice
        options:
          - web
          - server
          - ai
          - web,server
          - web,ai
          - server,ai
          - web,server,ai
        default: 'web,server,ai'
      environment:
        description: 'Deployment environment (e.g., dev, prod)'
        required: true
        default: 'dev'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Parse Selected Services
        id: parse
        run: |
          echo "Selected services: ${{ github.event.inputs.services }}"
          echo "WEB=$(echo '${{ github.event.inputs.services }}' | grep -q 'web' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "SERVER=$(echo '${{ github.event.inputs.services }}' | grep -q 'server' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "AI=$(echo '${{ github.event.inputs.services }}' | grep -q 'ai' && echo true || echo false)" >> $GITHUB_OUTPUT
          
      - name: Check permission for production deploy
        if: github.event.inputs.environment == 'prod'
        run: |
          ALLOWED_USERS="${{ secrets.ALLOWED_DEPLOY_USERS }}"

          echo "Actor: ${{ github.actor }}"

          for user in "${ALLOWED_USERS[@]}"; do
            if [[ "$user" == "${{ github.actor }}" ]]; then
              echo "✅ User authorized to deploy to production."
              exit 0
            fi
          done

          echo "❌ User '${{ github.actor }}' is NOT authorized to deploy to production."
          exit 1
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh

          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            ssh-keyscan "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
            echo "HOST=${{ secrets.SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.SSH_USER }}" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.environment }}" = "dev" ]; then
            echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            ssh-keyscan "${{ secrets.DEV_SSH_HOST }}" >> ~/.ssh/known_hosts
            echo "HOST=${{ secrets.DEV_SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SSH_USER }}" >> $GITHUB_ENV
          else
            echo "Unknown environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi

          chmod 600 ~/.ssh/id_rsa
          
      - uses: 'google-github-actions/auth@v3'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'
      - uses: 'google-github-actions/deploy-cloudrun@v3'
        if: github.event.inputs.environment == 'dev' && steps.parse.outputs.WEB == 'true'
        with:
          image: 'asia-southeast1-docker.pkg.dev/diyl-407103/ttpos-menu/ghcr.io/innet8/ttpos-menu/frontend:dev'
          service: 'frontend'
      - uses: 'google-github-actions/deploy-cloudrun@v3'
        if: github.event.inputs.environment == 'dev' && steps.parse.outputs.SERVER == 'true'
        with:
          image: 'asia-southeast1-docker.pkg.dev/diyl-407103/ttpos-menu/ghcr.io/innet8/ttpos-menu/backend:dev'
          service: 'backend'
      - uses: 'google-github-actions/deploy-cloudrun@v3'
        if: github.event.inputs.environment == 'dev' && steps.parse.outputs.AI == 'true'
        with:
          image: 'asia-southeast1-docker.pkg.dev/diyl-407103/ttpos-menu/ghcr.io/innet8/ttpos-menu/ai:dev'
          service: 'ai'
          
      - name: Run Deployment Commands
        if: github.event.inputs.environment == 'prod'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "${USER}@${HOST}" <<EOF
            set -e

            VERSION="${{ github.event.inputs.version }}"

            if [ "${{ steps.parse.outputs.WEB }}" = "true" ]; then
              echo "Deploying web..."
              docker pull ghcr.io/innet8/ttpos-menu/frontend:\$VERSION
              [ "${{ github.event.inputs.environment }}" = "prod" ] && docker tag ghcr.io/innet8/ttpos-menu/frontend:\$VERSION ghcr.io/innet8/ttpos-menu/frontend:latest
            fi

            if [ "${{ steps.parse.outputs.SERVER }}" = "true" ]; then
              echo "Deploying server..."
              docker pull ghcr.io/innet8/ttpos-menu/backend:\$VERSION
              [ "${{ github.event.inputs.environment }}" = "prod" ] && docker tag ghcr.io/innet8/ttpos-menu/backend:\$VERSION ghcr.io/innet8/ttpos-menu/backend:latest
            fi

            if [ "${{ steps.parse.outputs.AI }}" = "true" ]; then
              echo "Deploying ai..."
              docker pull ghcr.io/innet8/ttpos-menu/ai:\$VERSION
              [ "${{ github.event.inputs.environment }}" = "prod" ] && docker tag ghcr.io/innet8/ttpos-menu/ai:\$VERSION ghcr.io/innet8/ttpos-menu/ai:latest
            fi

            cd ttpos-menu
            git pull
            if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
              docker compose -f docker-compose-dev.yml up -d
              docker restart menu-nginx
            elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
              docker compose up -d
            fi
          EOF

