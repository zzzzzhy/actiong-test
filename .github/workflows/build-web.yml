name: Build Web Docker Images

on:
  workflow_dispatch:
    inputs:
      branch: 
        description: 'branch (e.g., release)'
        required: true
        default: 'dev'
      api_url: 
        description: 'api_url (e.g., release)'
        required: true
        default: 'https://scan.ttpos.com/api'       
      version: 
        description: 'image version (e.g., 1.0.0)'
        required: true
        default: 'latest'   
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: innet8/ttpos-menu # ghcr.io/your-username/your-repo



jobs:
  # TRABAJO 1: Compilar el binario del Backend
  build-backend:
    name: Build WEB
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Permiso para subir a GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ttpos-menu
          repository: innet8/ttpos-menu # 目标仓库的 owner 和名称
          token: ${{ secrets.OTHER_REPO_TOKEN }} # 使用存储在 secrets 中的 token
          ref: ${{ github.event.inputs.branch }} # 可选：指定要检出的分支或 tag，默认为 default branch

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd ttpos-menu
          npm install

      - name: Build Next.js standalone app
        # Asegúrate de tener "output: 'standalone'" en next.config.js
        run: |
          cd ttpos-menu
          sed -i '/NEXT_PUBLIC_API_URL/c\NEXT_PUBLIC_API_URL=${{ github.event.inputs.api_url }}' .env
          npm run build

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./ttpos-menu # El contexto es la carpeta con los artefactos
          file: ./ttpos-menu/docker/Dockerfile.frontend # Usa el Dockerfile de producción
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.event.inputs.version }} 
     